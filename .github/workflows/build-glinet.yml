# This is a basic workflow to help you get started with Actions

name: GL-AX1800 Firmware Compiler

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  # push:
  #   branches: [ "main" ]
  # pull_request:
  #   branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      device:
        description: 'Select the device model'     
        required: true
        default: 'target_wlan_ap-gl-ax1800' 
        type: choice
        options:
        - target_wlan_ap-gl-ax1800
        - target_wlan_ap-gl-axt1800
        - target_wlan_ap-gl-ax1800-5-4
        - target_wlan_ap-gl-axt1800-5-4
        
      ui:
        description: 'If the official UI is contained'
        required: false
        type: boolean

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a single command using the runners shell
      - name: Set up an environment
        run: |
          sudo apt update
          sudo apt upgrade -y
          sudo apt install build-essential libncurses5-dev gawk git libssl-dev gettext zlib1g-dev swig unzip time rsync python3 python3-setuptools python3-yaml
          git config --global user.name "abc"
          git config --global user.email abcd@163.com
      
      - name: Build up the firmware 
        run: |
          ./build.sh ~ ${{ inputs.device }} ${{ inputs.ui }}
        
      - name: Organize files
        id: organize
        if: true && !failure() && !cancelled()
        run: |
          cd ~/gl-infra-builder/wlan-ap/openwrt/bin/targets/*/*
          rm -rf packages
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          echo "::set-output name=status::success"
        
      - name: Upload firmware directory
        uses: actions/upload-artifact@main
        if: steps.organize.outputs.status == 'success' && !cancelled() && !failure()
        with:
          name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: ${{ env.FIRMWARE }}
            
      - name: Generate release tag
        id: tag
        if: true && !failure() && !cancelled()
        run: |
          echo "::set-output name=release_tag::$(date +"%Y.%m.%d-%H%M")"
          echo "::set-output name=status::success"
        
      - name: Upload firmware to release
        uses: softprops/action-gh-release@v1
        if: steps.tag.outputs.status == 'success' && !cancelled() && !failure()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.release_tag }}
          files: ${{ env.FIRMWARE }}/*
